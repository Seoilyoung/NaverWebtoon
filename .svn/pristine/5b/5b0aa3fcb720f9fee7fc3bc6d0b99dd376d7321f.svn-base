package gabriel.com.nwebtoon_android.adapter;

import android.content.Context;
import android.content.Intent;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;

import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.List;

import gabriel.com.nwebtoon_android.Activity.DetailActivity;
import gabriel.com.nwebtoon_android.Activity.ShowActivity;
import gabriel.com.nwebtoon_android.R;
import gabriel.com.nwebtoon_android.model.LocalData_CurrentWebtoon;

/**
 * Created by seoil on 2016-02-16.
 */
public class webtoonMyCurrentAdapter extends RecyclerView.Adapter<webtoonMyCurrentAdapter.ViewHolder> {
    SimpleDateFormat dateformat = new SimpleDateFormat("yyyy년 MM월 dd일");

        private final TypedValue mTypedValue = new TypedValue();
        private int mBackground;
        private List<LocalData_CurrentWebtoon> CurrentWebtoons;

        public static class ViewHolder extends RecyclerView.ViewHolder {
            public LocalData_CurrentWebtoon mBoundCurrentWebtoon;

            public final View View;
            public final ImageView img_thumbnail,img_stat, img_type;
            public final TextView txt_list_name, txt_list_wtr, txt_list_update_dt, txt_detailid;
            public final RelativeLayout layout_current ;
            public ViewHolder(View view) {
                super(view);
                View = view;
                layout_current = (RelativeLayout) view.findViewById(R.id.layout_current);
                img_thumbnail = (ImageView) view.findViewById(R.id.img_thumbnail);
                img_stat = (ImageView)view.findViewById(R.id.img_stat);
                img_type = (ImageView)view.findViewById(R.id.img_type);
                txt_list_name = (TextView) view.findViewById(R.id.txt_list_name);
                txt_list_wtr = (TextView) view.findViewById(R.id.txt_list_wtr);
                txt_list_update_dt = (TextView) view.findViewById(R.id.txt_list_update_dt);
                txt_detailid = (TextView)view.findViewById(R.id.txt_detailid);
            }
        }

        public LocalData_CurrentWebtoon getValueAt(int position) {
            return CurrentWebtoons.get(position);
        }

        public webtoonMyCurrentAdapter(Context context, List<LocalData_CurrentWebtoon> items) {
            context.getTheme().resolveAttribute(R.attr.selectableItemBackground, mTypedValue, true);
            mBackground = mTypedValue.resourceId;
            CurrentWebtoons = items;
        }

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.list_webtoon_my_current, parent, false);
            view.setBackgroundResource(mBackground);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(final ViewHolder holder, int position) {
            holder.mBoundCurrentWebtoon = CurrentWebtoons.get(position);
            holder.txt_list_name.setText(holder.mBoundCurrentWebtoon.TOON_NAME);
            holder.txt_list_wtr.setText(holder.mBoundCurrentWebtoon.TOON_WTR);
            Date date = new Date(holder.mBoundCurrentWebtoon.UPDATE_DT);
            holder.txt_list_update_dt.setText(dateformat.format(date));
            int int_DT_ID = Integer.parseInt(holder.mBoundCurrentWebtoon.DT_ID);
            String str_DT_ID = String.valueOf(int_DT_ID);
            holder.txt_detailid.setText(str_DT_ID+"화");

            if(holder.mBoundCurrentWebtoon.TOON_STAT==0)
                Glide.with(holder.img_stat.getContext()).load(R.drawable.ico_end).thumbnail(0.1f).into(holder.img_stat);
            else if(holder.mBoundCurrentWebtoon.TOON_STAT==2)
                Glide.with(holder.img_stat.getContext()).load(R.drawable.ico_rest).thumbnail(0.1f).into(holder.img_stat);

            if(holder.mBoundCurrentWebtoon.TOON_TP.equals("smart"))
                Glide.with(holder.img_type.getContext()).load(R.drawable.ico_smart).thumbnail(0.1f).into(holder.img_type);
            else if(holder.mBoundCurrentWebtoon.TOON_TP.equals("cut"))
                Glide.with(holder.img_type.getContext()).load(R.drawable.ico_cut).thumbnail(0.1f).into(holder.img_type);

            holder.View.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Context context = v.getContext();
                    Intent intent = new Intent(context, DetailActivity.class);
                    intent.putExtra("id", holder.mBoundCurrentWebtoon.TOON_ID);
                    intent.putExtra("name", holder.mBoundCurrentWebtoon.TOON_NAME);
                    context.startActivity(intent);
                }
            });

            holder.layout_current.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Context context = v.getContext();
                    Intent intent = new Intent(context, ShowActivity.class);
                    intent.putExtra("TOON_ID", holder.mBoundCurrentWebtoon.TOON_ID);
                    intent.putExtra("DT_ID", holder.mBoundCurrentWebtoon.DT_ID);
                    context.startActivity(intent);
                }
            });

            Glide.with(holder.img_thumbnail.getContext()).load(holder.mBoundCurrentWebtoon.DT_THM).thumbnail(0.1f).into(holder.img_thumbnail);
        }

        @Override
        public int getItemCount() {
            return CurrentWebtoons.size();
        }
}
