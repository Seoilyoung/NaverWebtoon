package gabriel.com.nwebtoon_android.Activity;

import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;

import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.TextView;
import android.widget.Toast;

import java.util.List;

import gabriel.com.nwebtoon_android.R;
import gabriel.com.nwebtoon_android.adapter.webtoonShowAdapter;
import gabriel.com.nwebtoon_android.model.LocalData;
import gabriel.com.nwebtoon_android.model.webtoonInfo;
import gabriel.com.nwebtoon_android.model.webtoonShow;
import gabriel.com.nwebtoon_android.network.Controller;
import gabriel.com.nwebtoon_android.network.ServerInterface;
import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;

public class ShowActivity extends AppCompatActivity {

    private ServerInterface api;
    RecyclerView recyclerView;
    private boolean mLockListView;
    LocalData localdata;
    LinearLayout layout_show_like;
    ImageView img_show_like, btn_comment_view;
    TextView txt_show_like, txt_show_rating_total,txt_show_rating;
    RatingBar ratingbar_show;
    Button btn_show_rating;
    String TOON_ID, DT_ID, TOON_NAME ;
    Toolbar toolbar ;
    boolean isToolbarAppeared,bool_like_chk=false;
    GestureDetector mDetector;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        localdata = LocalData.findById(LocalData.class, 1);
        if(!localdata.getRotation())
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        setContentView(R.layout.activity_show);
        showinit();
        showSet();
    }

    private void showinit(){
        Intent intent_Data = getIntent();
        TOON_ID = intent_Data.getStringExtra("TOON_ID");
        DT_ID = intent_Data.getStringExtra("DT_ID");
        TOON_NAME = intent_Data.getStringExtra("TOON_NAME");
        api = Controller.getInstance().getServerInterface();
        recyclerView = (RecyclerView) findViewById(R.id.recyclerview_cut);
        toolbar =(Toolbar) findViewById(R.id.below_toolbar);
        layout_show_like = (LinearLayout) findViewById(R.id.layout_show_like);
        img_show_like = (ImageView) findViewById(R.id.img_show_like);
        txt_show_like = (TextView) findViewById(R.id.txt_show_like);
        txt_show_rating_total = (TextView) findViewById(R.id.txt_show_rating_total);
        ratingbar_show = (RatingBar) findViewById(R.id.ratingbar_show);
        txt_show_rating = (TextView) findViewById(R.id.txt_show_rating);
        btn_show_rating = (Button) findViewById(R.id.btn_show_rating);
        btn_comment_view = (ImageView) findViewById(R.id.btn_comment_view);
    }

    private void showSet(){
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        api.getcutImageList(TOON_ID, DT_ID, new Callback<List<webtoonShow>>() {
            @Override
            public void success(List<webtoonShow> webtoonListShows, Response response) {
                recyclerView.setAdapter(new webtoonShowAdapter(getApplicationContext(), webtoonListShows));
            }

            @Override
            public void failure(RetrofitError error) {
                Toast.makeText(getApplicationContext(), "Failed to load thumbnails", Toast.LENGTH_LONG).show();
            }
        });
        recyclerView.smoothScrollBy(100, 1);
        if(localdata.naver_id !=null) {
            api.getdetailToonLike(TOON_ID, DT_ID, localdata.naver_id, new Callback<List<webtoonInfo>>() {
                @Override
                public void success(List<webtoonInfo> webtoonInfos, Response response) {
                    if (!webtoonInfos.isEmpty() && webtoonInfos.get(0).LIKE_OK) {
                        img_show_like.setImageResource(R.drawable.ic_favorite_border_red_24dp);
                        bool_like_chk = true;
                    }
                }

                @Override
                public void failure(RetrofitError error) {

                }
            });
        }
        api.getdetailToonLikeNum(TOON_ID, DT_ID, new Callback<List<webtoonInfo>>() {
            @Override
            public void success(List<webtoonInfo> webtoonInfos, Response response) {
                txt_show_like.setText(String.valueOf(webtoonInfos.get(0).LIKE_NUM));
            }

            @Override
            public void failure(RetrofitError error) {

            }
        });
        layout_show_like.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (localdata.naver_id != null) {
                    if (bool_like_chk) {
                        bool_like_chk = false;
                        img_show_like.setImageResource(R.drawable.ic_favorite_border_black_24dp);
                    } else {
                        bool_like_chk = true;
                        img_show_like.setImageResource(R.drawable.ic_favorite_border_red_24dp);
                    }
                    api.updateDetailToonLike(bool_like_chk, localdata.naver_id, TOON_ID, DT_ID, new Callback<List<webtoonInfo>>() {
                        @Override
                        public void success(List<webtoonInfo> webtoonInfos, Response response) {
                            txt_show_like.setText(String.valueOf(webtoonInfos.get(0).LIKE_NUM));
                        }

                        @Override
                        public void failure(RetrofitError error) {

                        }
                    });
                } else {
                    Toast.makeText(getApplicationContext(), "좋아요 기능은 로그인 후 이용할 수 있습니다.", Toast.LENGTH_SHORT).show();
                    Intent intent = new Intent(getApplicationContext(), SettingActivity.class);
                    startActivity(intent);
                }
            }
        });
        ratingbar_show.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() {
            @Override
            public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) {
                txt_show_rating.setText("(" + (int) (rating * 2) + "/10)");
            }
        });
       api.getRateDetailToon(TOON_ID, DT_ID, new Callback<List<webtoonInfo>>() {
           @Override
           public void success(List<webtoonInfo> webtoonInfos, Response response) {
               txt_show_rating_total.setText("별점 " + String.valueOf(webtoonInfos.get(0).DT_RATE));
           }

           @Override
           public void failure(RetrofitError error) {

           }
       });
        api.getPointDetailToon(localdata.naver_id, TOON_ID, DT_ID, new Callback<List<webtoonInfo>>() {
            @Override
            public void success(List<webtoonInfo> webtoonInfos, Response response) {
                if (!webtoonInfos.isEmpty()) {
                    ratingbar_show.setRating((float) webtoonInfos.get(0).POINT / 2);
                    ratingbar_show.setIsIndicator(true);
                } else if (localdata.naver_id != null)
                    btn_show_rating.setVisibility(View.VISIBLE);
            }

            @Override
            public void failure(RetrofitError error) {

            }
        });
        btn_show_rating.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (localdata.naver_id != null) {
                    api.insertPointDetailToon((int) (2 * ratingbar_show.getRating()), localdata.naver_id, TOON_ID, DT_ID, new Callback<List<webtoonInfo>>() {
                        @Override
                        public void success(List<webtoonInfo> webtoonInfos, Response response) {
                            ratingbar_show.setIsIndicator(true);
                            btn_show_rating.setVisibility(View.INVISIBLE);
                            txt_show_rating_total.setText("별점 " + String.valueOf(webtoonInfos.get(0).DT_RATE));
                        }

                        @Override
                        public void failure(RetrofitError error) {

                        }
                    });
                } else {
                    Toast.makeText(getApplicationContext(), "별점 기능은 로그인 후 이용할 수 있습니다.", Toast.LENGTH_SHORT).show();
                    Intent intent = new Intent(getApplicationContext(), SettingActivity.class);
                    startActivity(intent);
                }
            }
        });

        setSupportActionBar(toolbar);
        try {
            getSupportActionBar().show();
        }catch (NullPointerException e){
            Log.e("ShowActivity","- getSupportActionBar() NullPOintException");
        }
        isToolbarAppeared = true;
        /*getSupportActionBar().hide();
        isToolbarAppeared = false;*/
        mDetector = new GestureDetector(this, mGestureListener);
        btn_comment_view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(getApplicationContext(), CommentViewActivity.class);
                i.putExtra("TOON_ID", TOON_ID);
                i.putExtra("DT_ID", DT_ID);
                i.putExtra("TOON_NAME", TOON_NAME);
                startActivity(i);
            }
        });
        mLockListView = true;
    }


    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        return mDetector.onTouchEvent(event);
    }

    GestureDetector.OnGestureListener mGestureListener = new GestureDetector.OnGestureListener() {
        @Override
        public boolean onDown(MotionEvent e) {
            Log.e("touch","onDown");
            return false;
        }

        @Override
        public void onShowPress(MotionEvent e) {
            Log.e("touch","onShowPress");
        }

        @Override
        public boolean onSingleTapUp(MotionEvent e) {
            Log.e("touch","onSingleTapUp");
            ActionBar bar ;
            bar = getSupportActionBar();
            if(bar != null){
                if(isToolbarAppeared){
                    isToolbarAppeared = false;
                    bar.hide();
                }else{
                    isToolbarAppeared = true;
                    bar.show();
                }
            }else {
                Log.e("TapEvent", "getSupportActionBar() returns null");
            }
            return false;
        }

        @Override
        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
            Log.e("touch","onScroll");
            return false;
        }

        @Override
        public void onLongPress(MotionEvent e) {
            Log.e("touch","onLongPress");
        }

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
            Log.e("touch","onFling");
            return false;
        }
    };
}