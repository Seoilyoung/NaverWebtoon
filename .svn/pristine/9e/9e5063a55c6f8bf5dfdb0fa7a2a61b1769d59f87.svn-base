package gabriel.com.nwebtoon_android.Activity;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.design.widget.TabLayout;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.GravityCompat;
import android.support.v4.view.ViewPager;

import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.nhn.android.naverlogin.OAuthLogin;
import com.nhn.android.naverlogin.OAuthLoginHandler;
import com.nhn.android.naverlogin.ui.view.OAuthLoginButton;
import com.viewpagerindicator.TitlePageIndicator;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import gabriel.com.nwebtoon_android.model.NaverUserData;
import gabriel.com.nwebtoon_android.model.adList;
import gabriel.com.nwebtoon_android.module.CirclePageIndicator;
import gabriel.com.nwebtoon_android.network.Controller;
import gabriel.com.nwebtoon_android.R;

import gabriel.com.nwebtoon_android.model.webtoonListDay;
import gabriel.com.nwebtoon_android.network.ServerInterface;
import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {

    /*Naver Login 정보들 */
    private static String OAUTH_CLIENT_ID = "yxvQuXWQY72biKivtbLq";
    private static String OAUTH_CLIENT_SECRET = "Qn7TjzRMUj";
    private static String OAUTH_CLIENT_NAME = "네이버 아이디로 로그인";
    private OAuthLoginButton mOAuthLoginButton;
    private static OAuthLogin mOAuthLoginInstance;
    static private Context mContext;
    TextView txt_login_info;
    ImageView btn_logout;

    private ServerInterface api ;
    private DrawerLayout drawer ;
    ViewGroup layout_drawer_search, layout_drawer_mypage, layout_drawer_setting ;
    ViewPager viewPager;
    TabLayout tabLayout;
    public static List<adList> ad_img = null;
    ImageFragmentPagerAdapter imageFragmentPagerAdapter;
    static final int NUM_ITEMS = 4;
    ViewPager ads_pager;
    CirclePageIndicator page_indicator;




    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        setContentView(R.layout.activity_main);
        Toolbar toolbar =(Toolbar) findViewById(R.id.toolbar);
        toolbar.setContentInsetsAbsolute(0,0);
        drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (drawer.isDrawerVisible(GravityCompat.END)) {
                    drawer.closeDrawer(GravityCompat.END);
                } else {
                    drawer.openDrawer(GravityCompat.END);
                }
            }
        });
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        setDrawerMenu();


        viewPager = (ViewPager) findViewById(R.id.viewpager_mainpage);
        viewPager.setOffscreenPageLimit(6);
        if(viewPager != null){
            setupViewPager(viewPager);
        }
        imageFragmentPagerAdapter = new ImageFragmentPagerAdapter(getSupportFragmentManager());
        ads_pager = (ViewPager) findViewById(R.id.ads_pager);

        page_indicator = (CirclePageIndicator) findViewById (R.id.page_indicator);
        ads_pager.setAdapter(imageFragmentPagerAdapter);
        page_indicator.setViewPager(ads_pager);

        tabLayout = (TabLayout) findViewById(R.id.tab_main);
        //tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);
        tabLayout.setupWithViewPager(viewPager);

        //Naver Api Initialization
        btn_logout = (ImageView) findViewById(R.id.btn_logout);
        mOAuthLoginHandler = new OAuthLoginHandler() {
            @Override
            public void run(boolean success) {
                if (success) {
                    String accessToken = mOAuthLoginInstance.getAccessToken(mContext);
                    String refreshToken = mOAuthLoginInstance.getRefreshToken(mContext);
                    long expiresAt = mOAuthLoginInstance.getExpiresAt(mContext);
                    String tokenType = mOAuthLoginInstance.getTokenType(mContext);
                /*mOauthAT.setText(accessToken);
                mOauthRT.setText(refreshToken);
                mOauthExpires.setText(String.valueOf(expiresAt));
                mOauthTokenType.setText(tokenType);
                mOAuthState.setText(mOAuthLoginInstance.getState(mContext).toString());*/
                    Log.e("MainActivity##","OAuthLoginHandler run - success");
                    RequestApiTask requestApi = (RequestApiTask) new RequestApiTask().execute();

                } else {
                    Log.e("MainActivity##","OAuthLoginHandler run - not success");
                    String errorCode = mOAuthLoginInstance.getLastErrorCode(mContext).getCode();
                    String errorDesc = mOAuthLoginInstance.getLastErrorDesc(mContext);
                    Log.e("##errocode","errorCode:" + errorCode + ", errorDesc:" + errorDesc);
                    Toast.makeText(mContext, "errorCode:" + errorCode + ", errorDesc:" + errorDesc, Toast.LENGTH_SHORT).show();
                }
            };
        };
        mContext = this;
        mOAuthLoginInstance = Controller.getInstance().getNaverApi();
        mOAuthLoginInstance.init(this, OAUTH_CLIENT_ID, OAUTH_CLIENT_SECRET, OAUTH_CLIENT_NAME);
        mOAuthLoginButton = (OAuthLoginButton) findViewById(R.id.buttonOAuthLoginImg);
        mOAuthLoginButton.setOAuthLoginHandler(mOAuthLoginHandler);
        txt_login_info = (TextView) findViewById(R.id.txt_login_info);
        mOAuthLoginButton.setBgResourceId(R.drawable.ic_login);
        mOAuthLoginHandler.run(true);
        //mOAuthLoginInstance.startOauthLoginActivity(MainActivity.this, mOAuthLoginHandler);
        btn_logout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Context appContext = getApplicationContext();
                mOAuthLoginInstance.logout(mContext);
                RequestApiTask requestApi = (RequestApiTask) new RequestApiTask().execute();
                if(appContext != null) {
                    Toast.makeText(appContext,"로그아웃 되었습니다", Toast.LENGTH_SHORT).show();
                }
                Controller.getInstance().flushNaverUserData();
            }
        });
    }
    static private OAuthLoginHandler mOAuthLoginHandler = null;

    //RequestApiTask requestApi = (RequestApiTask) new RequestApiTask().execute();

    private class RequestApiTask extends AsyncTask<Void, Void, String> {
        @Override
        protected void onPreExecute() {
            Log.e("MainActivity##","onPreExecute()");
            mOAuthLoginButton.setVisibility(View.GONE);
            btn_logout.setVisibility(View.GONE);
            txt_login_info.setVisibility(View.INVISIBLE);
            //mApiResultText.setText((String) "");
        }
        @Override
        protected String doInBackground(Void... params) {
            String url = "https://openapi.naver.com/v1/nid/getUserProfile.xml";
            String at = mOAuthLoginInstance.getAccessToken(mContext);
            return mOAuthLoginInstance.requestApi(mContext, at, url);
        }
        protected void onPostExecute(String content) {
            try{
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                InputStream istream = new ByteArrayInputStream(content.getBytes("utf-8"));
                Document doc = builder.parse(istream);
                Element order = doc.getDocumentElement();

                NodeList items = order.getElementsByTagName("message");
                Node item = items.item(0);
                Node text = item.getFirstChild();
                String ItemName = text.getNodeValue();
                Log.e("XML parser##",ItemName);
                Log.e("XML parser##",String.valueOf(ItemName.equals("success")));
                Log.e("XML parser##",mOAuthLoginInstance.getState(mContext).toString());
                if(ItemName.equals("success") && mOAuthLoginInstance.getState(mContext).toString().equals("OK")){//로그인된 상태
                    Log.e("auth response##",content);
                  //Authentication success
                    items = order.getElementsByTagName("email");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.email = text.getNodeValue();

                    items = order.getElementsByTagName("nickname");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.nickname = text.getNodeValue();

                    items = order.getElementsByTagName("enc_id");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.enc_id = text.getNodeValue();

                    items = order.getElementsByTagName("profile_image");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.profile_image = text.getNodeValue();

                    items = order.getElementsByTagName("age");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.age = text.getNodeValue();

                    items = order.getElementsByTagName("gender");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.gender = text.getNodeValue();

                    items = order.getElementsByTagName("id");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.id = text.getNodeValue();

                    items = order.getElementsByTagName("name");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.name = text.getNodeValue();

                    items = order.getElementsByTagName("birthday");
                    item = items.item(0);
                    text = item.getFirstChild();
                    Controller.naverUserData.birthday = text.getNodeValue();

                    txt_login_info.setText(Controller.naverUserData.email+"\n 로그인 되었습니다.");
                    txt_login_info.setVisibility(View.VISIBLE);
                    btn_logout.setVisibility(View.VISIBLE);
                } else {
                  //Authentication failure
                    mOAuthLoginButton.setVisibility(View.VISIBLE);
                    txt_login_info.setText("로그인 해주세요");
                    txt_login_info.setVisibility(View.VISIBLE);
                }

            }catch (Exception e){
                e.printStackTrace();
                Log.e("NaverLogin##", "로그인 response xml 메시지 파싱 에러");
                txt_login_info.setText("로그인 응답메시지 xml 파싱 에러");
                txt_login_info.setVisibility(View.VISIBLE);
            }
        }
    }

    @Override
    public void onBackPressed() {
        if (drawer.isDrawerOpen(GravityCompat.END)) {
            drawer.closeDrawer(GravityCompat.END);
        } else {
            super.onBackPressed();
        }
    }

    private void setupViewPager(ViewPager viewPager) {
        MainPageAdapter adapter = new MainPageAdapter(getSupportFragmentManager());
        adapter.addFragment(ToonListFragment.newInstance(0), "일");
        adapter.addFragment(ToonListFragment.newInstance(1), "월");
        adapter.addFragment(ToonListFragment.newInstance(2), "화");
        adapter.addFragment(ToonListFragment.newInstance(3), "수");
        adapter.addFragment(ToonListFragment.newInstance(4), "목");
        adapter.addFragment(ToonListFragment.newInstance(5), "금");
        adapter.addFragment(ToonListFragment.newInstance(6), "토");

        viewPager.setAdapter(adapter);

    }
    static class MainPageAdapter extends FragmentStatePagerAdapter {
        private final List<Fragment> mFragments = new ArrayList<>();
        private final List<String> mFragmentTitles = new ArrayList<>();

        public MainPageAdapter(FragmentManager fm) {
            super(fm);
        }

        public void addFragment(Fragment fragment, String title) {
            mFragments.add(fragment);
            mFragmentTitles.add(title);
        }

        @Override
        public Fragment getItem(int position) {
            return mFragments.get(position);
        }

        @Override
        public int getCount() {
            return mFragments.size();
        }

        @Override
        public CharSequence getPageTitle(int position) {
            return mFragmentTitles.get(position);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    public static class ImageFragmentPagerAdapter extends FragmentPagerAdapter {
        public ImageFragmentPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            SwipeFragment fragment = new SwipeFragment();
            return SwipeFragment.newInstance(position);
        }

        @Override
        public int getCount() {
            return NUM_ITEMS;
        }
    }
    public static class SwipeFragment extends Fragment {
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View swipeView = inflater.inflate(R.layout.fragment_main_ads_pager, container, false);
            ImageView imageView = (ImageView) swipeView.findViewById(R.id.img_ad);
            Bundle bundle = getArguments();
            int position = bundle.getInt("position");
            try {
                adList adInfo = ad_img.get(position);
               // Glide.with(this).load(adInfo.TOON_IMG).into(imageView);
                switch (position){
                    case 0 :
                        imageView.setImageResource(R.drawable.ad_0001);
                        break;
                    case 1 :
                        imageView.setImageResource(R.drawable.ad_0002);
                        break;
                    default:
                        imageView.setImageResource(R.drawable.ad_0001);
                        break;
                }
            } catch(Exception e){
                Log.e("MainActivity", "Ad image loading failed");
                e.printStackTrace();
            }
            return swipeView;
        }

        static SwipeFragment newInstance(int position) {
            SwipeFragment swipeFragment = new SwipeFragment();
            Bundle bundle = new Bundle();
            bundle.putInt("position", position);
            swipeFragment.setArguments(bundle);
            return swipeFragment;
        }
    }






    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_camera) {
            // Handle the camera action
        } else if (id == R.id.nav_gallery) {

        } else if (id == R.id.nav_slideshow) {

        } else if (id == R.id.nav_manage) {

        } else if (id == R.id.nav_share) {

        } else if (id == R.id.nav_send) {

        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.END);
        return true;
    }

    private void setDrawerMenu() {

        layout_drawer_search = (ViewGroup)findViewById(R.id.layout_drawer_search);
        layout_drawer_search.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(getApplicationContext(), "검색화면 출력", Toast.LENGTH_SHORT).show();
                drawer.closeDrawer(GravityCompat.END);
                /*Intent intent = new Intent(getApplicationContext(), SearchActivity.class);
                startActivity(intent);*/
            }
        });
        layout_drawer_mypage = (ViewGroup)findViewById(R.id.layout_drawer_mypage);
        layout_drawer_mypage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                drawer.closeDrawer(GravityCompat.END);
                Intent intent = new Intent(getApplicationContext(), MypageActivity.class);
                startActivity(intent);
            }
        });
        layout_drawer_setting = (ViewGroup)findViewById(R.id.layout_drawer_setting);
        layout_drawer_setting.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                drawer.closeDrawer(GravityCompat.END);
                Intent intent = new Intent(getApplicationContext(), SettingActivity.class);
                startActivity(intent);
            }
        });
    }

}
