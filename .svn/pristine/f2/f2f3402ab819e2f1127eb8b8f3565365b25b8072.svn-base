package gabriel.com.nwebtoon_android.Activity;

import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;


import android.media.Image;
import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AbsListView;
import android.widget.ImageView;
import android.widget.Toast;

import java.util.List;

import gabriel.com.nwebtoon_android.R;
import gabriel.com.nwebtoon_android.adapter.webtoonShowAdapter;
import gabriel.com.nwebtoon_android.model.LocalData;
import gabriel.com.nwebtoon_android.model.webtoonShow;
import gabriel.com.nwebtoon_android.network.Controller;
import gabriel.com.nwebtoon_android.network.ServerInterface;
import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;

/**
 * Created by seoil on 2016-02-24.
 */
public class ShowActivity extends AppCompatActivity {

    private ServerInterface api;
    RecyclerView recyclerView;
    private boolean mLockListView;
    LocalData localdata;
    ImageView btn_comment_view;
    String TOON_ID, DT_ID, TOON_NAME;

    boolean isToolbarAppeared;
    GestureDetector mDetector;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        localdata = LocalData.findById(LocalData.class, 1);
        if(localdata.getRotation() != true)
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        setContentView(R.layout.activity_show);

        Toolbar toolbar =(Toolbar) findViewById(R.id.below_toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().show();
        isToolbarAppeared = true;
        /*getSupportActionBar().hide();
        isToolbarAppeared = false;*/
        mDetector = new GestureDetector(this, mGestureListener);

        btn_comment_view = (ImageView) findViewById(R.id.btn_comment_view);
        btn_comment_view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(getApplicationContext(), CommentViewActivity.class);
                i.putExtra("TOON_ID",TOON_ID);
                i.putExtra("DT_ID", DT_ID);
                i.putExtra("TOON_NAME",TOON_NAME);
                startActivity(i);
            }
        });
        mLockListView = true;
        recyclerView = (RecyclerView) findViewById(R.id.recyclerview_cut);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        Intent intent = getIntent();
        TOON_ID = intent.getStringExtra("TOON_ID");
        DT_ID = intent.getStringExtra("DT_ID");
        TOON_NAME = intent.getStringExtra("TOON_NAME");
        Toast.makeText(getApplicationContext(),TOON_ID + "  " + DT_ID,Toast.LENGTH_SHORT).show();
        api = Controller.getInstance().getServerInterface();
        api.getcutImageList(TOON_ID, DT_ID, new Callback<List<webtoonShow>>() {
            @Override
            public void success(List<webtoonShow> webtoonListShows, Response response) {
                recyclerView.setAdapter(new webtoonShowAdapter(getApplicationContext(), webtoonListShows));
            }

            @Override
            public void failure(RetrofitError error) {
                Toast.makeText(getApplicationContext(), "Failed to load thumbnails", Toast.LENGTH_LONG).show();
            }
        });
        recyclerView.smoothScrollBy(100,1);
    }
    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        return mDetector.onTouchEvent(event);
    }

    GestureDetector.OnGestureListener mGestureListener = new GestureDetector.OnGestureListener() {
        @Override
        public boolean onDown(MotionEvent e) {
            Log.e("touch","onDown");
            return false;
        }

        @Override
        public void onShowPress(MotionEvent e) {
            Log.e("touch","onShowPress");
        }

        @Override
        public boolean onSingleTapUp(MotionEvent e) {
            Log.e("touch","onSingleTapUp");
            ActionBar bar = null;
            bar = getSupportActionBar();
            if(bar != null){
                if(isToolbarAppeared){
                    isToolbarAppeared = false;
                    bar.hide();
                }else{
                    isToolbarAppeared = true;
                    bar.show();
                }
            }else {
                Log.e("TapEvent", "getSupportActionBar() returns null");
            }
            return false;
        }

        @Override
        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
            Log.e("touch","onScroll");
            return false;
        }

        @Override
        public void onLongPress(MotionEvent e) {
            Log.e("touch","onLongPress");
        }

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
            Log.e("touch","onFling");
            return false;
        }
    };
}